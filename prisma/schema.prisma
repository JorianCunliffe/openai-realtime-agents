// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"            // SQLite is easiest for Replit dev
  url      = env("DATABASE_URL") // put this in Secrets
}

enum OAuthProvider {
  GOOGLE
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  oauthAccounts  OAuthAccount[]
  settings       UserSettings?
  callerMappings CallerMapping[]
  auditLogs      AuditLog[]
}

model OAuthAccount {
  id                String   @id @default(cuid())
  userId            String
  provider          OAuthProvider
  providerAccountId String
  accessToken       String
  refreshToken      String
  expiresAt         DateTime?
  scope             String?
  tokenType         String?
  idToken           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model UserSettings {
  userId           String   @id
  timezone         String   @default("Australia/Brisbane")
  workingHoursJson Json?
  featureFlagsJson Json?
  defaultAgentConfig String?
  calendarsJson    Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CallerMapping {
  id        String   @id @default(cuid())
  userId    String
  phoneE164 String   @unique
  label     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  metaJson  Json?
  createdAt DateTime @default(now())

  user      User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
}

model Session {
  /// Use the exact string you set in the `sid` cookie (no default here on purpose).
  id        String   @id
  /// Your appâ€™s stable user identifier (string). Can be a user table FK later.
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}